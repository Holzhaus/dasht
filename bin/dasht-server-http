#!/bin/sh -e
#
# Reads a single HTTP request from stdin and writes a response to stdout.
#
# Written in 2016 by Suraj N. Kurapati <https://github.com/sunaku/dasht>
# Distributed under the terms of the ISC license (see the LICENSE file).

# Escapes XML "predefined entities" in given arguments.
# see http://www.w3.org/TR/REC-xml/#sec-predefined-ent
html_escape_predefined_entities() {
  echo "$*" |
  sed -e 's/&/\&amp;/g' \
      -e 's/"/\&quot;/g' \
      -e "s/'/\&apos;/g" \
      -e 's/</\&lt;/g' \
      -e 's/>/\&gt;/g'
}

# parse URL out of HTTP request
url=$(awk '
  /^GET (\S+) HTTP\/1\.[01]\r$/ { print $2 }
  /^\r$/ { exit } # reached end of HTTP request
')

# parse URL query parameters as shell variables
eval "$(
  # split URL on query parameter delimiters (?&)
  IFS='?&'
  set -- $url
  shift # protocol, hostname, port number, path

  # convert segments into safely eval()able assignments
  for segment; do
    # split param=value
    param=${segment%%=*}
    value=${segment#*=}

    # only accept known parameters to prevent injection
    case "$param" in (query|docsets)
      # decode URL-encoded characters in parameter value
      value=$(echo "$value" | tr '+' ' ' | # + is space
        # convert %HEX into \OCT for printf to evaluate
        # later on when we eval() the entire expression
        sed 's/%\([[:xdigit:]]\{2\}\)/\\\\\\$(echo "obase=8; ibase=16; \1" | bc)/g'
      )
      if test -n "$value"; then
        echo "$param=\$(printf \"$value\")"
        echo "${param}_html=\$(html_escape_predefined_entities \"\$$param\")"
      fi
    ;;esac
  done
)"

# emit response header
printf 'HTTP/1.0 200 OK\r\n'
printf 'Content-Type: text/html\r\n'
printf '\r\n'

# emit response body
cat <<RESPONSE_BODY
<!DOCTYPE html>
<html>
  <head>
    <title>dasht $query_html $docsets_html</title>
    <base target="_blank">
  </head>
  <body>
    <style>
      form {
        top: 0;
        position: fixed;
        background-color: whitesmoke;
      }
      table {
        margin-top: 2em;
        border-collapse: collapse;
      }
      td:first-child {
        font-family: monospace;
        padding-right: 2em;
      }
      tr:hover {
        font-weight: bold;
        background-color: whitesmoke;
      }
      a {
        text-decoration: none;
      }
      a:hover {
        text-decoration: underline;
      }
      b > i {
        font-style: normal;
        background-color: yellow;
      }
    </style>
    <form method="get" action="/" target="_self">
      Search for <input name="query" value="$query_html" type="search"
                        placeholder="spaces are wildcards" autofocus>
      in docsets <input name="docsets" value="$docsets_html" type="search"
                        placeholder="$(dasht-docsets | tr '\n' ' ')"
                        list="docsets" multiple>
      <input type="submit">
    </form>
    <table>$(dasht-query-html "$query" $docsets)</table>
    <datalist id="docsets">
      $(dasht-docsets | sed 's|.*|<option value="&">&</option>|')
    </datalist>
  </body>
</html>
RESPONSE_BODY
