#!/bin/sh -e
#
# # DASHT-QUERY-HTML 1            2016-03-14                            1.2.0
#
# ## NAME
#
# dasht-query-html - searches [Dash] docsets and emits HTML table rows
#
# ## SYNOPSIS
#
# `dasht-query-html` [*PATTERN*] [*DOCSET*]...
#
# ### Examples
#
# `dasht-query-html`
#   First 100 topics from each installed docset.
#
# `dasht-query-html` 'c - x'
#   Search for "c - x" in all installed docsets.
#
# `dasht-query-html` 'c - x' bash
#   Search for "c - x" only in the "bash" docset.
#
# `dasht-query-html` 'c - x' bash css
#   Search for "c - x" only in the "bash" and "css" docsets.
#
# ## DESCRIPTION
#
# Searches for *PATTERN* in all installed [Dash] docsets, optionally searching
# only in those whose names match *DOCSET*s, by calling dasht-query-line(1).
# The results are then printed, one per line, to stdout as HTML table rows.
#
# ### Searching
#
# Whitespace characters in *PATTERN* are treated as wildcards, whereas the
# SQL LIKE wildcard characters `%` and `_` are not: they are taken literally.
#
# Before searching, *PATTERN* is surrounded by whitespace wildcards so that it
# can match anywhere: beginning, middle, or end.  As a result, if *PATTERN* is
# undefined, it becomes a whitespace wildcard and thereby matches everything.
#
# ## ENVIRONMENT
#
# `DASHT_DOCSETS_DIR`
#   Defines the filesystem location where your [Dash] docsets are installed.
#   If undefined, its value is assumed to be `$XDG_DATA_HOME/dasht/docsets/`
#   or, if `XDG_DATA_HOME` is undefined, `$HOME/.local/share/dasht/docsets/`.
#
# ## SEE ALSO
#
# dasht-query-line(1), dasht-docsets(1), dasht(1), [Dash]
#
# [Dash]: https://kapeli.com/dash
#
# ## AUTHOR
#
# Written in 2016 by Suraj N. Kurapati <https://github.com/sunaku/dasht>
# Distributed under the terms of the ISC license (see the LICENSE file).

dasht-query-line "$@" | awk -v IGNORECASE=1 -v pattern="$1" '
  BEGIN {
    gsub("[\\^.[$()|*+?{]", "\\\\&", pattern) # escape normal regex(7) syntax
    sub("^[[:space:]]+", "", pattern)         # strip leading whitespace
    sub("[[:space:]]+$", "", pattern)         # strip trailing whitespace
    gsub("[[:space:]]+", ".*", pattern)       # treat whitespace as wildcards
  }
  NR == 1      { print "<table>" }
  $2 == "="    { result[$1] = substr($0, index($0, $2) + length($2) + 1) }
  pattern &&
  $1 == "name" { gsub(pattern, "<b><i>&</i></b>", result["name"]) }
  $1 == "url"  { print \
    "<tr>"\
      "<td><a href=\"" result["url"] "\">" result["name"] "</a></td>"\
      "<td align=\"right\">" result["from"] "</td>"\
      "<td>" tolower(result["type"]) "</td>"\
    "</tr>"
  }
  END { if (NR > 0) print "</table>" }
'
